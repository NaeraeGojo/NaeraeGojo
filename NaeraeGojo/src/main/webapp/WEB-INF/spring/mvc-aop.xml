<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
	<!-- 
		joinpoint : 어디에다가.... 중복 제거된 실행되는 코드가 실제 실행되어야하는 장소(메서드)
		pointcut : 다수의 joinpoint들의 패키징
		aspect : 중복 제거된 추출된 단일 코드
		advice : 언제... 시점
		weaving : pointcut 을 대상으로 aspect를 advice에 실행
		
		* 로깅 aspect 작성후 활용
		* 사용자 정의 어노테이션 작성 후 LoggerFactory의 인스턴스를 자동 주입

	-->
	<aop:config>
		<aop:pointcut id="theWholeMethodPC" 
					  expression="execution(* kr.or.ddit..*.*(..))"/>
		<aop:aspect ref="logPrintAspect">
			<aop:before method="theWholeJPCallBefore" pointcut-ref="theWholeMethodPC"/>
			<aop:after method="theWholeJPCallAfter" pointcut-ref="theWholeMethodPC"/>
			<aop:after-throwing method="theWholeJPCallThrowsAfter" pointcut-ref="theWholeMethodPC"
				throwing="ex"/>
			<aop:around method="theWholeJPCallBeforeNAfter" pointcut-ref="theWholeMethodPC"/>
		</aop:aspect>
	
	</aop:config>

</beans>
