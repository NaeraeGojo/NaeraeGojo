<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="emp">
	<typeAlias alias="empVO" type="kr.or.ddit.vo.EmpVO"/>
	<typeAlias alias="historyVO" type="kr.or.ddit.vo.HistoryVO"/>

	<!-- 전체직원 조회 -->
	<sql id="selectAll">
		SELECT A.*
			  ,B.PART_NAME
		  FROM EMP A, PART B
		  WHERE A.PART_CODE = B.PART_CODE
		  AND A.EMP_DELETE = 'n'
	</sql>

	<!-- 해당 직원의 모든이력 조회 -->
	<sql id="historyAll">
		SELECT *
		  FROM HISTORY
		  WHERE HISTORY_DELETE = 'n'
		  AND EMP_CODE= #emp_code#
	</sql>
	
	<!-- 중복 이메일 찾기 -->
	<select id="empEmail" parameterClass="map" resultClass="empVO">
		SELECT *
		  FROM EMP
		  WHERE EMP_EMAIL = #emp_email#
	</select>
	
	<!-- 사원번호 찾기 -->
	<select id="empNum" parameterClass="map" resultClass="empVO">
		SELECT *
		  FROM EMP
		  WHERE EMP_NAME= #emp_name#
		  AND EMP_EMAIL = #emp_email#
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="empPass" parameterClass="map" resultClass="empVO">
		SELECT *
		  FROM EMP
		  WHERE EMP_DELETE = 'n'
		  AND EMP_CODE = #emp_code#
		  AND EMP_EMAIL = #emp_email#
	</select>
	
	
	<!-- 이력목록 -->
	<select id="historyList" resultClass="historyVO" parameterClass="map">
        SELECT B.*
        FROM  (SELECT ROWNUM RNUM, A.*
                FROM ( <include refid="historyAll"/> 
                        ORDER BY HISTORY_CODE) A ) B
<!--         <![CDATA[                 -->
<!--         WHERE B.rnum <= #startCount# -->
<!--          AND  B.rnum >= #endCount# -->
<!--         ]]> -->
        ORDER BY B.RNUM DESC
    </select> 
       
	<!-- 이력 Info(객체 받아오기) -->
	<select id="historyInfo" parameterClass="map" resultClass="historyVO">
			SELECT *
		  FROM HISTORY
		  WHERE HISTORY_DELETE = 'n'
		AND HISTORY_CODE = #history_code#
	</select>

	<!-- 이력삭제 -->	
	<update id="deleteHistory" parameterClass="map">
		UPDATE HISTORY
		   SET HISTORY_DELETE = 'y'
		 WHERE HISTORY_CODE = #history_code#
	</update>
	
	<!-- 이력수정 -->	
	<update id="updateHistory" parameterClass="historyVO">
		UPDATE HISTORY
		   SET  HISTORY_NOTICE_AGENCY	=	#history_notice_agency#
				,HISTORY_DEMAND_AGENCY	=	#history_demand_agency#
				,HISTORY_PROJECT_NAME	=	#history_project_name#
				,HISTORY_BUSINESS		=	#history_business#
				,HISTORY_PROJECT_START	=	#history_project_start#
				,HISTORY_PROJECT_END	=	#history_project_end#
		 WHERE HISTORY_CODE    =	#history_code#
	</update>
	
	<!-- 이력등록 -->
	<insert id="insertHistory" parameterClass="historyVO">
		<selectKey keyProperty="history_code" resultClass="string">
         select history_seq.nextval from dual
      	</selectKey>
		INSERT INTO HISTORY(HISTORY_CODE
						,HISTORY_NOTICE_AGENCY
						,HISTORY_DEMAND_AGENCY
						,HISTORY_PROJECT_NAME
						,HISTORY_BUSINESS
						,HISTORY_DELETE
						,EMP_CODE
						,HISTORY_PROJECT_START
						,HISTORY_PROJECT_END)		
		  	     VALUES(#history_code#
						,#history_notice_agency#
						,#history_demand_agency#
						,#history_project_name#
						,#history_business#
						,#history_delete#
						,#emp_code#
						,#history_project_start#
						,#history_project_end#)
	</insert>
	
	<!-- 검색 -->
	<sql id="searchCondition">
        <dynamic prepend="AND">
            <isNotEmpty property="search_keyword" >
                <isEqual property="search_keycode" compareValue="ALL" open="(" close=")">
                        EMP_CODE LIKE '%'||#search_keyword#||'%'
                    EMP_CODE LIKE '%'||#search_keyword#||'%'
                    OR EMP_NAME LIKE '%'||#search_keyword#||'%'
                    OR EMP_ROLE LIKE '%'||#search_keyword#||'%'
                </isEqual>
            </isNotEmpty>
        </dynamic>
    </sql>

	<!-- 직원목록 -->
	<select id="empList" resultClass="empVO" parameterClass="map">
        SELECT B.*
        FROM  (SELECT ROWNUM RNUM, A.*
                FROM ( <include refid="selectAll"/> 
                        <include refid="searchCondition"/> 
                        ORDER BY EMP_CODE ASC) A ) B
<!--         <![CDATA[                 -->
<!--         WHERE B.rnum <= #startCount# -->
<!--          AND  B.rnum >= #endCount# -->
<!--         ]]> -->
        ORDER BY B.RNUM DESC
    </select>    
	
	<!-- 휴먼상태의 회원을 로그인 시켜줌 -->
	<update id="empInfoW" parameterClass="map">
		UPDATE EMP
		   SET EMP_DELETE = 'n'
		 WHERE EMP_CODE = #emp_code#
	</update>

	<!-- 직원Info(객체 받아오기) -->
	<select id="empInfo" parameterClass="map" resultClass="empVO">
		<include refid="selectAll"/>
		 AND EMP_CODE = #emp_code#
		   <dynamic>
		   		<isNotEmpty property="emp_pass" prepend="AND">
				   EMP_PASS = #emp_pass#
		   		</isNotEmpty> 	
		   </dynamic>
	</select>
	
	<!-- 직원등록 -->
	<insert id="insertEmpInfo" parameterClass="empVO">
		<selectKey keyProperty="emp_code" resultClass="string">
         select emp_seq.nextval from dual
      	</selectKey>
		INSERT INTO EMP(EMP_CODE
						,EMP_PASS
						,EMP_NAME
						,EMP_NICK
						,EMP_EMAIL
						,EMP_ENCPN
						,EMP_GENDER
						,EMP_MARRIAGE
						,EMP_LEVEL
						,EMP_MAJOR
						,EMP_ARMY
						,EMP_PHONE
						,EMP_ROLE
						,PART_CODE)		
		  	     VALUES(#emp_code#
						,#emp_pass#
						,#emp_name#
						,#emp_nick#
						,#emp_email#
						,#emp_encpn#
						,#emp_gender#
						,#emp_marriage#
						,#emp_level#
						,#emp_major#
						,#emp_army#
						,#emp_phone#
						,#emp_role#
						,#part_code#)
	</insert>
	
	<update id="updateEmpInfo" parameterClass="empVO">
		UPDATE EMP
		   SET EMP_PASS			=	#emp_pass#
		   	  ,EMP_MARRIAGE		=	#emp_marriage# 
		      ,EMP_NICK			=	#emp_nick#
		      ,EMP_ARMY			=	#emp_army#
		      ,EMP_PHONE     	=	#emp_phone#
		      ,EMP_EMAIL     	=	#emp_email#
		      ,PART_CODE     	=	#part_code#
		      ,EMP_ROLE     	=	#emp_role#
		      ,EMP_LEVEL     	=	#emp_level#
		 WHERE EMP_CODE 		=	#emp_code#
	</update>

	<update id="deleteEmpInfo" parameterClass="map">
		UPDATE EMP
		   SET EMP_DELETE = 'y'
		 WHERE EMP_CODE = #emp_code#
	</update>

</sqlMap>


