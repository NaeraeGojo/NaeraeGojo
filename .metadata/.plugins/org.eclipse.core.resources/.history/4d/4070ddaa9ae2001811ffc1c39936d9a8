package kr.or.ddit.controller.join;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.or.ddit.service.member.IMemberService;
import kr.or.ddit.utils.CryptoGenerator;
import kr.or.ddit.vo.MemberVO;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.support.MessageSourceAccessor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

// http://localhost/SpringToddler/user/join/loginForm.do
// http://localhost/SpringToddler/user/join/loginCheck.do
// <bean name="joinPkg" class="kr.or.ddit.controller.join.JoinController" />
@Controller("joinPkg")
@RequestMapping("/user/")
public class JoinController{
//public class JoinController implements ApplicationContextAware{
	@Autowired
	private IMemberService service;
	@Autowired
	private CryptoGenerator cryptoGen;
//	@Autowired
//	private MessageSourceAccessor messageAccesor;
	
	
//	@Autowired
//	public JoinController(IMemberService service){
//		System.out.println("service : "+ System.identityHashCode(service));
//	}
	
	
	@Autowired
	public void injectionIMemberService(IMemberService service){
		System.out.println("service : " + 
	              System.identityHashCode(service));
	}
	// 컨트롤러 메서드 반환타입 : void, Model, ModelMap, Map - 클라이언트의 요청시 servlet path를 기준으로 view가 결정
//						  String - 포워딩 대상 View의 경로와 View명
	//                    ModelAndView - Model = 포워딩 대상 View에 전달될 데이터
	//                                   View = 포워딩 대상 View의 경로와 View명
	// 컨트롤러 메서드 파라메터 default injection : 
	//                 클라이언트 요청시 개별 쿼리스트링의 값,
	//                 Map<String, String> params,
//					   MemberVO paramVO,
//					   HttpSession session,
//					   HttpServletRequest request,
//					   HttpServletResponse response,
//					   Model model,
//					   ModelMap modelMap,
//					   ModelAndView andView
//	@RequestHeader : 클라이언트 요청시 요청헤더의 특정키로 값을 취득
//	@CookieValue : 클라이언트로부터 전송되는 쿠키 취득
	
	@RequestMapping("loginForm")
//	public String loginForm(){
	private Model loginForm(HttpSession session, 
			Model model,
			@RequestHeader("Accept-Language") String al,
			@RequestHeader("User-Agent") String ua){
		System.out.println("Accept-Language : "+ al);
		System.out.println("User-Agent : "+ ua);
		// InternalResourceViewResolver
		// <property name="prefix" value="/WEB-INF/views/"></property>
		// <property name="suffix" value=".jsp"></property>
		// /WEB-INF/views/user/join/loginForm.jsp
//		return "user/join/loginForm"; 
		Map<String, String> publicKeyMap = cryptoGen.getGeneratePairKey(session);
		model.addAttribute("publicKeyMap", publicKeyMap);
		
		return model;
	}
	
	// mem_id=a001&mem_pass=asdfasdf
//	@RequestMapping(value="loginCheck", params={"mem_id=a001", "mem_pass=asdfasdf"}, method=RequestMethod.POST)
	@RequestMapping(value="loginCheck", method=RequestMethod.POST)
	public String loginCheck(String mem_id, String mem_pass,
			Map<String, String> params,
			MemberVO paramVO,
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			Model model,
			ModelMap modelMap,
			ModelAndView andView,
			@CookieValue(value="mem_id", required=false) String cookieMemID) throws Exception {
		System.out.println("전송된 쿠키 mem_id : " + cookieMemID);
		// 암호문 => 평문
		String decryptMEMID = cryptoGen.decryptRSA(session, mem_id);
		String decryptMEMPWD = cryptoGen.decryptRSA(session, mem_pass);
		
		params.put("mem_id", decryptMEMID);
		params.put("mem_pass", decryptMEMPWD);
		
		MemberVO memberInfo = service.memberInfo(params);
		if(memberInfo == null){
			String message = "";
			try {
//				message = messageAccesor.getMessage("fail.common.join", Locale.KOREA);
				message = URLEncoder.encode(message, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			// 리다이렉트 - redirect:
//			return "redirect:/user/member/memberForm.do?message="+message;
			return "redirect:/user/loginForm.do";
		}else{
			session.setAttribute("LOGIN_MEMBERINFO", memberInfo);
			// 포워딩     - forward:
			return "forward:/user/join/main.do";
		}
	}
	
	@RequestMapping("logout")
	public String logout(HttpSession session){
		session.removeAttribute("LOGIN_MEMBERINFO");
		
//		String path= (String) session.getAttribute("path");
//		String dir = request.getParameter("dir");
//		
//		if(path == null){
//			path = "/user/main.do";
//		}else if(path.contains("admin") && dir.equals("admin")){
//			path = "/admin/main.do";
//		}else if(path.contains("admin") && dir.equals("user")){
//			path = "/user/main.do";
//		}
		
		return "redirect:/user/loginForm.do";
	}
	
	@RequestMapping("idCheck")
	public void idCheck(){}
	
	
//	@Override
//	public void setApplicationContext(ApplicationContext applicationContext)
//			throws BeansException {
//		service = applicationContext.getBean("memberService", IMemberService.class);
//	}

}



